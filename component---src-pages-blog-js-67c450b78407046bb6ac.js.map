{"version":3,"sources":["webpack:///./src/components/PostPreview/PostPreview.module.css","webpack:///./src/components/PostPreview/PostPreview.js","webpack:///./src/components/PostPreview/index.js","webpack:///./src/pages/Blog.js"],"names":["module","exports","PostPreview","post","node","showExcerpt","showButton","className","postPreviewStyles","container","entry","to","fields","slug","date","frontmatter","title","excerpt","button","arrow","PostPreviewByYear","year","postsInYear","yearPostsContainer","map","key","id","postPreviewWrapper","BlogPage","data","siteMetadata","site","postsByYear","posts","order","reg","forEach","match","push","categoryPostsByYear","allMarkdownRemark","edges","yearDesc","Object","keys","sort","a","b","keywords","style","width","height","fluid","bgImg","childImageSharp","alt","position","top","left","right","margin","padding","textTransform","textShadow","textAlign","color","letterSpacing","lineHeight","background","sloganBlog","display","flexWrap","pageQuery"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,UAAY,uCAAuC,MAAQ,mCAAmC,KAAO,kCAAkC,MAAQ,mCAAmC,QAAU,qCAAqC,OAAS,oCAAoC,MAAQ,mCAAmC,mBAAqB,gDAAgD,KAAO,kCAAkC,mBAAqB,kD,8HCGxcC,EAAc,SAAC,GAA2D,IAAnDC,EAAkD,EAAxDC,KAAwD,IAA5CC,mBAA4C,aAAxBC,kBAAwB,SAC7E,OACE,yBAAKC,UAAWC,IAAkBC,WAChC,kBAAC,OAAD,CAAMF,UAAWC,IAAkBE,MAAOC,GAAIR,EAAKS,OAAOC,MACxD,0BAAMN,UAAWC,IAAkBM,MAAOX,EAAKY,YAAYD,MAC3D,wBAAIP,UAAWC,IAAkBQ,OAAQb,EAAKY,YAAYC,OACzDX,GACC,uBAAGE,UAAWC,IAAkBS,SAAUd,EAAKc,UAGlDX,GACC,kBAAC,OAAD,CAAMC,UAAWC,IAAkBU,OAAQP,GAAIR,EAAKS,OAAOC,MACzD,0BAAMN,UAAWC,IAAkBW,OAAnC,WAOJC,EAAoB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAA6B,IAAvBC,mBAAuB,MAAT,GAAS,EACxD,OACE,6BAASf,UAAWC,IAAkBe,oBACpC,wBAAIhB,UAAWC,IAAkBa,MAAOA,GACvCC,EACCA,EAAYE,KAAI,SAAArB,GAAI,OAClB,yBACEsB,IAAKtB,EAAKC,KAAKsB,GACfnB,UAAWC,IAAkBmB,oBAE7B,kBAAC,EAAD,CACEF,IAAKtB,EAAKC,KAAKsB,GACftB,KAAMD,EAAKC,KACXC,aAAa,QAKnB,oCAMOH,IC7CAA,O,2OCkFA0B,UA1EE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACVC,EAAiBD,EAAKE,KAAtBD,aAEFE,EAyGR,SAA6BC,EAAOC,QAAgB,IAAhBA,MAAQ,QAC1C,IAAIF,EAAc,GACZG,EAAM,SAYZ,OAXAF,EAAMG,SAAQ,SAAAjC,GAAS,IAGfkB,EAFWlB,EAAKC,KAAKW,YAAnBD,KACWuB,MAAMF,GACN,GAEdH,EAAYX,KACfW,EAAYX,GAAQ,IAEtBW,EAAYX,GAAMiB,KAAKnC,MAGlB6B,EAvHaO,CADKV,EAAKW,kBAAtBC,OAEFC,EAAWC,OAAOC,KAAKZ,GAAaa,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KAE7D,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK9B,MAAM,OAAOgC,SAAU,CAAC,SAAU,cAAe,WACtD,iCACE,kBAAC,IAAD,CACEC,MAAO,CACLC,MAAO,OACPC,OAAQ,QAEVC,MAAOvB,EAAKwB,MAAMC,gBAAgBF,MAClCG,IAAI,+BAGN,yBACEN,MAAO,CACLO,SAAU,WACVC,IAAK,MACLC,KAAM,IACNC,MAAO,IACPT,MAAO,OACPU,OAAQ,OACRC,QAAS,WAGX,yBACEZ,MAAO,CACLa,cAAe,YACfC,WAAY,iBACZF,QAAS,WAGX,wBACEZ,MAAO,CACLe,UAAW,SACXC,MAAO,QAEPC,cAAe,SACfC,WAAY,IACZC,WAAY,oBAGbtC,EAAauC,eAKtB,6BACEpB,MAAO,CACLW,OAAQ,SACRU,QAAS,OACTC,SAAU,SAGX7B,EAASlB,KAAI,SAAAH,GACZ,IAAIC,EAAcU,EAAYX,GAC9B,OACE,kBAAC,IAAD,CACEI,IAAKJ,EACLA,KAAMA,EACNC,YAAaA,UAWpB,IAAMkD,EAAS","file":"component---src-pages-blog-js-67c450b78407046bb6ac.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PostPreview-module--container--JGFew\",\"entry\":\"PostPreview-module--entry--B3Rmo\",\"date\":\"PostPreview-module--date--1f3sI\",\"title\":\"PostPreview-module--title--2aI37\",\"excerpt\":\"PostPreview-module--excerpt--3FBNg\",\"button\":\"PostPreview-module--button--HnC_e\",\"arrow\":\"PostPreview-module--arrow--1djkn\",\"yearPostsContainer\":\"PostPreview-module--yearPostsContainer--1PDOV\",\"year\":\"PostPreview-module--year--1-wrE\",\"postPreviewWrapper\":\"PostPreview-module--postPreviewWrapper--1ItuR\"};","import React from 'react';\nimport { Link } from 'gatsby';\nimport postPreviewStyles from './PostPreview.module.css';\n\nconst PostPreview = ({ node: post, showExcerpt = true, showButton = true }) => {\n  return (\n    <div className={postPreviewStyles.container}>\n      <Link className={postPreviewStyles.entry} to={post.fields.slug}>\n        <span className={postPreviewStyles.date}>{post.frontmatter.date}</span>\n        <h3 className={postPreviewStyles.title}>{post.frontmatter.title}</h3>\n        {showExcerpt && (\n          <p className={postPreviewStyles.excerpt}>{post.excerpt}</p>\n        )}\n      </Link>\n      {showButton && (\n        <Link className={postPreviewStyles.button} to={post.fields.slug}>\n          <span className={postPreviewStyles.arrow}>Read</span>\n        </Link>\n      )}\n    </div>\n  );\n};\n\nconst PostPreviewByYear = ({ year, postsInYear = [] }) => {\n  return (\n    <section className={postPreviewStyles.yearPostsContainer}>\n      <h1 className={postPreviewStyles.year}>{year}</h1>\n      {postsInYear ? (\n        postsInYear.map(post => (\n          <div\n            key={post.node.id}\n            className={postPreviewStyles.postPreviewWrapper}\n          >\n            <PostPreview\n              key={post.node.id}\n              node={post.node}\n              showExcerpt={false}\n            />\n          </div>\n        ))\n      ) : (\n        <h2>暂无</h2>\n      )}\n    </section>\n  );\n};\n\nexport default PostPreview;\nexport { PostPreviewByYear };\n","import PostPreview, { PostPreviewByYear } from './PostPreview';\n\nexport default PostPreview;\nexport { PostPreviewByYear };\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { PostPreviewByYear } from '../components/PostPreview'\nimport Img from 'gatsby-image'\n// eslint-disable-next-line\nimport { fluidImageBg } from '../utils/ImageQuery'\n\nconst BlogPage = ({ data }) => {\n  const { siteMetadata } = data.site\n  const { edges: posts } = data.allMarkdownRemark\n  const postsByYear = categoryPostsByYear(posts)\n  const yearDesc = Object.keys(postsByYear).sort((a, b) => b - a)\n  // console.log(yearDesc);\n  return (\n    <Layout>\n      <SEO title=\"Blog\" keywords={['gatsby', 'application', 'react']} />\n      <section>\n        <Img\n          style={{\n            width: '100%',\n            height: '80vh',\n          }}\n          fluid={data.bgImg.childImageSharp.fluid}\n          alt=\"osman-rana-263708-unsplash\"\n        />\n\n        <div\n          style={{\n            position: 'absolute',\n            top: '35%',\n            left: '0',\n            right: '0',\n            width: '100%',\n            margin: 'auto',\n            padding: '0 2rem',\n          }}\n        >\n          <div\n            style={{\n              textTransform: 'uppercase',\n              textShadow: '1px 1px 0 #011',\n              padding: '0 2rem',\n            }}\n          >\n            <h4\n              style={{\n                textAlign: 'center',\n                color: 'white',\n                // color: '#d45c54',\n                letterSpacing: '0.1rem',\n                lineHeight: '2',\n                background: 'rgba(0,0,0,0.8)',\n              }}\n            >\n              {siteMetadata.sloganBlog}\n            </h4>\n          </div>\n        </div>\n      </section>\n      <section\n        style={{\n          margin: '0 auto',\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n        {yearDesc.map(year => {\n          let postsInYear = postsByYear[year]\n          return (\n            <PostPreviewByYear\n              key={year}\n              year={year}\n              postsInYear={postsInYear}\n            />\n          )\n        })}\n      </section>\n    </Layout>\n  )\n}\n\nexport default BlogPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        sloganBlog\n      }\n    }\n    bgImg: file(relativePath: { eq: \"osman-rana-263708-unsplash.jpg\" }) {\n      childImageSharp {\n        fluid(maxWidth: 3000, grayscale: true) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          id\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\nfunction categoryPostsByYear(posts, order = 'DESC') {\n  var postsByYear = {}\n  const reg = /(\\d)+/g\n  posts.forEach(post => {\n    const { date } = post.node.frontmatter\n    const dates = date.match(reg)\n    const year = dates[1]\n\n    if (!postsByYear[year]) {\n      postsByYear[year] = []\n    }\n    postsByYear[year].push(post)\n  })\n  // console.log(postsByYear['2017'], postsByYear['2018']);\n  return postsByYear\n}\n"],"sourceRoot":""}